{"version":3,"sources":["components/auth/Register.jsx","components/auth/Login.jsx","components/main/Navigatior.jsx","components/main/Dashboard.jsx","components/main/CustomerModal.jsx","components/main/Customers.jsx","components/main/DeviceModal.jsx","components/main/Devices.jsx","components/main/Profile.jsx","App.js","index.js","api/main.js","api/index.js"],"names":["API","require","default","Register","props","useState","name","addressEmail","location","licenseNumber","password","insuranceCompany","setInsuranceCompany","history","useHistory","handleOnChange","event","currentTarget","target","value","data","handleRegister","evt","a","preventDefault","register","push","alert","message","className","md","onSubmit","label","icon","type","validate","error","success","onChange","href","Login","setAddressEmail","setPassword","handleChange","handleLogin","login","result","localStorage","setItem","onClick","Navigator","dashboard","dashboardActive","customers","customersActive","devices","devicesActive","profile","profileActive","classNames","dark","expand","scrolling","fixed","to","navbar","left","right","removeItem","Dashboard","token","getItem","setCustomers","storageSelectedCustomer","JSON","parse","id","selectedCustomer","setSelectedCustomer","predictedClaimValue","setPredictedClaimValue","predictedClaimAmount","setPredictedClaimAmount","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","leftIntensity","setleftIntensity","timeOnTheRoadLine","setTimeOnTheRoadLine","rightItensity","setRightItensity","barChartAcc","setBarChartAcc","barChartBrake","setBarChartBrake","fetchCustomers","getCustomers","selectCustomer","customer","textContent","getMachineGeneratedData","stringify","window","reload","customerId","time","acc","brake","amount","forEach","useEffect","Navigatior","dropleft","caret","basic","map","_id","active","firstName","lastName","options","responsive","CustomerModal","setCustomer","toggle","setShowModal","showModal","editCustomer","console","log","isOpen","centered","phoneNumber","age","size","disabled","selected","hidden","gender","martialStatus","Customers","columns","field","sort","width","rows","setData","handleEdit","find","row","handleDelete","deleteCustomerById","response","consumers","customerData","consumer","striped","bordered","hover","DeviceModal","selectedDevice","setSelectedDevice","editDevice","carAge","licensePlate","color","Devices","customerName","device","deleteDeviceById","fetchDevices","getDevices","getCustomerById","devicesData","Promise","all","Profile","getLoggedUser","updateProfile","App","isLogin","exact","path","render","ReactDOM","document","getElementById","BASE_URL","axios","method","url","headers","statusCode","addMachineGenerateData","apis","authCredentials"],"mappings":"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","file":"static/js/main.384587da.chunk.js","sourcesContent":["import '../../index.css';\nimport React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\nconst API = require(\"../../api/index\").default;\n\nfunction Register(props) {\n    const [insuranceCompany, setInsuranceCompany] = useState({\n      name: '',\n      addressEmail: '',\n      location: '',\n      licenseNumber: '',\n      password: ''\n    })\n    const history = useHistory();\n\n    const handleOnChange = event => {\n      const { name, value } = event.currentTarget || event.target;\n      const data = {...insuranceCompany};\n      data[name] = value;\n      setInsuranceCompany(data);\n    };\n\n    const handleRegister = async (evt) => {\n      try {\n        evt.preventDefault();\n        const result = await API.register(insuranceCompany);\n        if (result) return history.push('/auth/login')\n        alert (\"We couldn't register to the system!\");\n      } catch(err) {\n        alert (err.message)\n        throw err;\n      }\n    }; \n\n    return (\n        <MDBContainer className=\"containerClass\">\n        <MDBRow  className=\"rowClass\">\n          <MDBCol md=\"6\">\n            <MDBCard>\n              <MDBCardBody>\n                <form onSubmit={handleRegister}>\n                  <p className=\"h5 text-center py-4\">SIGN UP</p>\n                  <div className=\"grey-text\">\n                    <MDBInput\n                      label=\"Name\"\n                      name=\"name\"\n                      icon=\"user\"\n                      type=\"text\"\n                      validate\n                      error=\"wrong\"\n                      success=\"right\"\n                      value={insuranceCompany.name}\n                      onChange={handleOnChange}\n                    />\n                    <MDBInput\n                      label=\"Location\"\n                      name=\"location\"\n                      icon=\"map-marker-alt\"\n                      type=\"text\"\n                      validate\n                      error=\"wrong\"\n                      success=\"right\"\n                      value={insuranceCompany.location}\n                      onChange={handleOnChange}\n                    />\n                    <MDBInput\n                      label=\"Business License Number\"\n                      name=\"licenseNumber\"\n                      icon=\"id-card\"\n                      type=\"text\"\n                      validate\n                      error=\"wrong\"\n                      success=\"right\"\n                      value={insuranceCompany.licenseNumber}\n                      onChange={handleOnChange}\n                    />\n                    <MDBInput\n                      label=\"Address Email\"\n                      name=\"addressEmail\"\n                      icon=\"envelope\"\n                      type=\"email\"\n                      validate\n                      error=\"wrong\"\n                      success=\"right\"\n                      value={insuranceCompany.addressEmail}\n                      onChange={handleOnChange}\n                    />\n                    <MDBInput\n                      label=\"Password\"\n                      name=\"password\"\n                      icon=\"lock\"\n                      type=\"password\"\n                      validate\n                      value={insuranceCompany.password}\n                      onChange={handleOnChange}\n                    />\n                  </div>\n                  <div className=\"text-center\">\n                    <MDBBtn className=\"btn submit\" type=\"submit\"> REGISTER </MDBBtn>\n                    <div className=\"p-2\">\n                      <p> Already have an account? <a href=\"/auth/login\">Login</a> </p>\n                    </div>\n                  </div>\n                </form>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    );\n}\n\nexport default Register;","import '../../index.css';\nimport React, { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\nconst API = require(\"../../api/index\").default;\n\nfunction Login (props) {\n    const [ addressEmail, setAddressEmail ] = useState('');\n    const [ password, setPassword ] = useState('');\n    const history = useHistory();\n    \n    \n    const handleChange = (evt) => {\n        const {name, value } = evt.currentTarget || evt.target;\n        if (name === 'email') {\n            setAddressEmail(value);\n        } else {\n            setPassword(value);\n        }\n    }\n\n\n    const handleLogin = async (evt) => {\n        try {\n            evt.preventDefault();\n            const result = await API.login({ addressEmail, password});\n            if (result) {\n                localStorage.setItem('token', result);\n                return history.push('/main/dashboard')\n            }\n            alert (\"We couldn't login to the system!\");\n          } catch(err) {\n            alert (err.message);\n            throw err;\n          }\n    }\n\n    return (\n        <MDBContainer className=\"containerClass\">\n        <MDBRow className=\"rowClass\">\n            <MDBCol md=\"6\">\n                <MDBCard>\n                    <MDBCardBody>\n                        <form>\n                            <p className=\"h5 text-center mb-4\">SIGN IN</p>\n                            <div className=\"grey-text\">\n                            <MDBInput \n                                label=\"Address Email\" \n                                name=\"email\"\n                                icon=\"envelope\"  \n                                type=\"email\" \n                                validate \n                                error=\"wrong\"\n                                success=\"right\" \n                                value={addressEmail}\n                                onChange={handleChange}\n                            />\n                            <MDBInput \n                                label=\"Password\" \n                                name=\"password\"\n                                icon=\"lock\"  \n                                type=\"password\" \n                                validate \n                                value={password}\n                                onChange={handleChange}\n                            />\n                            </div>\n                            <div className=\"text-center\">\n                                <MDBBtn className=\"btn submit\" onClick={handleLogin}>Login</MDBBtn>\n                                <div className=\"p-2\">\n                                    <a className=\"p-4\" href=\"/auth/register\">Create new account</a>\n                                    {/* TODO: To be supported if there were other versions\n                                    <a className=\"p-4\" href=\"/auth/forgotPassword\">Forgot Password?</a> */}\n                                </div>\n                            </div>\n                        </form>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n        </MDBRow>\n        </MDBContainer>\n    )\n}\nexport default Login;","import React, { useState }  from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport { useHistory } from 'react-router-dom';\n\nfunction Navigator(props) {\n  const history = useHistory();\n  const [classNames, setClassNames] = useState({\n      dashboard: props.dashboardActive || false,\n      customers: props.customersActive || false,\n      devices: props.devicesActive || false,\n      profile: props.profileActive || false\n  })\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('selectedCustomer');\n  }\n\n  return (\n      <div>\n          <MDBNavbar className='navbarBackground' dark expand=\"md\" scrolling fixed=\"top\">\n            <MDBNavbarBrand href=\"/\">\n              <MDBNavLink to=\"/main/profile\" className={classNames.profile} ><MDBIcon className=\"icon\" icon=\"user\" /></MDBNavLink>\n            </MDBNavbarBrand>\n            <MDBCollapse navbar>\n              <MDBNavbarNav left>\n                <MDBNavItem className={classNames.dashboard}>\n                    <MDBNavLink to=\"/main/dashboard\">Dashboard</MDBNavLink>\n                </MDBNavItem>\n                <MDBNavItem className={classNames.customers}>\n                    <MDBNavLink to=\"/main/customers\">Customers</MDBNavLink>\n                </MDBNavItem>\n                <MDBNavItem className={classNames.devices}>\n                    <MDBNavLink to=\"/main/devices\">Devices</MDBNavLink>\n                </MDBNavItem>\n              </MDBNavbarNav>\n              <MDBNavbarNav right>\n                <MDBNavItem>\n                  <MDBNavLink to=\"/auth/login\" onClick={() => logout()}><MDBIcon icon=\"sign-out-alt\" /></MDBNavLink>\n                </MDBNavItem>\n              </MDBNavbarNav>\n            </MDBCollapse>\n          </MDBNavbar>\n      </div>\n    );\n}\n\nexport default Navigator","import { useEffect, useState } from 'react';\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Navigatior from \"./Navigatior\";\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Dashboard(props) {\n    const token = localStorage.getItem('token');\n    const [customers, setCustomers] = useState([]);\n    const storageSelectedCustomer = localStorage.getItem('selectedCustomer');\n    const [selectedCustomer, setSelectedCustomer] = useState(storageSelectedCustomer ? JSON.parse(storageSelectedCustomer) : {id: null, name: \"Choose Customer\"});\n    const [predictedClaimValue, setPredictedClaimValue] = useState(localStorage.getItem('predictedValue') ? JSON.parse(localStorage.getItem('predictedValue')) :false)\n    const [predictedClaimAmount, setPredictedClaimAmount] = useState(localStorage.getItem('predictedAmount') ? JSON.parse(localStorage.getItem('predictedAmount')) :0)\n  \n    const [leftIntensity, setleftIntensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Left Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(175, 175, 65, .3)\",\n            borderColor: \"rgb(175, 175, 65)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(86, 96, 64)\",\n            pointBackgroundColor: \"rgb(78, 55, 3)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: localStorage.getItem('left') ? JSON.parse(localStorage.getItem('left')) : []\n        }]\n    })\n    const [timeOnTheRoadLine, setTimeOnTheRoadLine] = useState({\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n        datasets: [{\n            label: \"Annual Percentage Of Time On The Road\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(213, 248, 255, .3)\",\n            borderColor: \"rgb(133, 179, 209, 1.00)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(0, 27, 67)\",\n            pointBackgroundColor: \"rgb(0, 27, 67, .5)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: localStorage.getItem('time') ? JSON.parse(localStorage.getItem('time')) : []\n        }]\n    });\n    const [rightItensity, setRightItensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Right Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(251, 221, 118, .5)\",\n            borderColor: \"rgb(249, 212, 85)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(111, 88, 0)\",\n            pointBackgroundColor: \"rgb(41, 32, 2)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data:  localStorage.getItem('right') ? JSON.parse(localStorage.getItem('right')) : []\n        }]\n    });\n    const [barChartAcc, setBarChartAcc] = useState({\n        labels: ['Accel.06miles', 'Accel.08miles', 'Accel.09miles', 'Accel.11miles', 'Accel.12miles', 'Accel.14miles'],\n        datasets: [{\n            label: 'Sudden Acceleration',\n            data:  localStorage.getItem('acc') ? JSON.parse(localStorage.getItem('acc')) : [],\n            backgroundColor: [\n                'rgba(72, 123, 177, .5)',\n                'rgba(175, 175, 65, .5)',\n                'rgba(175, 96, 65, .5)',\n                'rgba(172, 232, 120, .5)',\n                'rgba(90, 81, 2, .5)',\n                'rgba(251, 221, 118, .5)'\n            ],\n        }]\n    });\n    const [barChartBrake, setBarChartBrake] = useState({\n        labels: [\"Brake.06miles\", \"Brake.08miles\", \"Brake.09miles\", \"Brake.11miles\", \"Brake.12miles\", \"Brake.14miles\"],\n        datasets: [{\n            label: 'Sudden Brakes',\n            data:  localStorage.getItem('brake') ? JSON.parse(localStorage.getItem('brake')) : [],\n            backgroundColor: [\n                'rgba(72, 123, 177, .5)',\n                'rgba(175, 175, 65, .5)',\n                'rgba(175, 96, 65, .5)',\n                'rgba(172, 232, 120, .5)',\n                'rgba(90, 81, 2, .5)',\n                'rgba(251, 221, 118, .5)'\n            ],\n        }]\n    });\n    \n    const fetchCustomers = async () => {\n        try {\n        const customers = await API.getCustomers(token);\n        setCustomers(customers);\n        } catch (err){\n            alert(err);\n        }\n    }\n    \n    const selectCustomer = async (evt) => {\n        const target = evt.target;\n        const customer = {id: target.value, name: target.textContent};\n        await getMachineGeneratedData(customer.id);\n        localStorage.setItem('selectedCustomer', JSON.stringify(customer));\n        setSelectedCustomer(customer);\n        window.location.reload(true)\n    }\n\n    const getMachineGeneratedData = async (customerId) => {\n        const result = await API.getMachineGeneratedData(token, customerId);\n        let left = [], time = [], right = [], acc = [], brake = [], value = false, amount = 0;\n        (result || []).forEach(data => {\n            left.push(data['Left_turn_intensity08'], data['Left_turn_intensity09'], data['Left_turn_intensity10'], data['Left_turn_intensity11'], data['Left_turn_intensity12']);\n            time.push(data['Pct_drive_mon'], data['Pct_drive_tue'], data['Pct_drive_wed'], data['Pct_drive_thr'], data['Pct_drive_fri'], data['Pct_drive_sat'], data['Pct_drive_sun']);\n            right.push(data['Right_turn_intensity08'], data['Right_turn_intensity09'], data['Right_turn_intensity10'], data['Right_turn_intensity11'], data['Right_turn_intensity12']);\n            acc.push(data['Accel_06miles'], data['Accel_08miles'], data['Accel_09miles'], data['Accel_11miles'], data['Accel_12miles'], data['Accel_14miles']);\n            brake.push(data['Brake_06miles'], data['Brake_08miles'], data['Brake_09miles'], data['Brake_11miles'], data['Brake_12miles'], data['Brake_14miles']);\n            value = data.predictedClaimValue;\n            amount = data.predictedClaimAmount;\n        });\n        leftIntensity.datasets[0].data = left;\n        localStorage.setItem('left', JSON.stringify(left));\n        timeOnTheRoadLine.datasets[0].data = time;\n        localStorage.setItem('time', JSON.stringify(time));\n        rightItensity.datasets[0].data = right;\n        localStorage.setItem('right', JSON.stringify(right));\n        barChartAcc.datasets[0].data = acc;\n        localStorage.setItem('acc',JSON.stringify(acc));\n        barChartBrake.datasets[0].data = brake;\n        localStorage.setItem('brake',JSON.stringify(brake));\n        setleftIntensity(leftIntensity);\n        setTimeOnTheRoadLine(timeOnTheRoadLine);\n        setRightItensity(rightItensity);\n        setBarChartAcc(barChartAcc);\n        setBarChartBrake(barChartBrake);\n        localStorage.setItem('predictedValue', JSON.stringify(value));\n        setPredictedClaimValue(value);\n        localStorage.setItem('predictedAmount', JSON.stringify(amount));\n        setPredictedClaimAmount(amount);\n    }\n\n    const addMachineGeneratedData = async () => {\n        setInterval(async() => {\n           await API.addMachineGenerateData(token)\n        }, 43200000); //Every 12 hours\n    }\n\n    useEffect(() => {\n        fetchCustomers();\n    }, [customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake])\n\n\n    return(\n        <MDBContainer className=\"dashboardGrid\">\n            <Navigatior dashboardActive=\"active\" />\n            <MDBRow className=\"notification\">\n                <MDBDropdown dropleft>\n                    <MDBDropdownToggle caret>\n                        {selectedCustomer.name}\n                    </MDBDropdownToggle>\n                    <MDBDropdownMenu basic>\n                        {customers.map((customer)=> {\n                            return (<MDBDropdownItem value={customer._id} active={selectedCustomer.id === customer._id ? true : false} \n                                onClick={(evt) => selectCustomer(evt)}> {customer.firstName + \"  \" + customer.lastName} </MDBDropdownItem>)\n                        })}\n                    </MDBDropdownMenu>\n                    </MDBDropdown>\n                    {selectedCustomer.id &&\n                        <span className=\"p-3\"> According to Machine Learning model there is a \n                                <p className={predictedClaimValue ? \"text-success d-inline\" : \"text-danger d-inline\"}> {predictedClaimValue ? 'higher' : 'lower'} </p> \n                                 chance of customer making an insurance claim.\n                                    Amount:  <p className=\"font-weight-bold d-inline \">{predictedClaimAmount}</p>\n                        </span> \n                    }\n            </MDBRow>\n            { selectedCustomer.id &&\n                 <MDBRow>\n                 <MDBCol>\n                    <Line data={leftIntensity} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={timeOnTheRoadLine} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={rightItensity} options={{ responsive: true }} />\n                </MDBCol>\n            </MDBRow>\n            }\n            { selectedCustomer.id &&\n            <MDBRow>\n                <div className=\"w-100\" />\n                <MDBCol> \n                    <Bar data={barChartAcc} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol> \n                    <Bar data={barChartBrake} options={{ responsive: true }} />\n                </MDBCol>\n                </MDBRow>\n            }\n        </MDBContainer>\n    )\n}\nexport default Dashboard","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput, MDBIcon } from 'mdbreact';\nconst API = require(\"../../api/main\").default;\n\nfunction CustomerModal(props) {\n    const [customer, setCustomer] = useState(props.customer);\n    const history = useHistory();\n\n    const toggle = () => {\n      return props.setShowModal(!props.showModal);\n    }\n\n    const handleChange = (evt) => {\n      const { name, value } = evt.currentTarget || evt.target;\n      const data = {...customer};\n      data[name] = value;\n      setCustomer(data);\n    }\n\n    const editCustomer = async (evt) => {\n        try {\n            evt.preventDefault();\n            const result = await API.editCustomer(customer, localStorage.getItem('token'));\n            if (result) {\n              toggle();\n              return history.push('/main/customers')\n            }\n            return console.log(\"opps try again\")\n          } catch(err) {\n            throw err;\n          }\n    }\n\n    return (\n      <MDBContainer>\n        <MDBModal isOpen={props.showModal} centered>\n          <MDBModalHeader>Add Customers</MDBModalHeader>\n          <MDBModalBody>\n            <form>\n                <div className=\"grey-text\">\n                    <div>\n                    <MDBInput label=\"First Name\" icon=\"user\" name=\"firstName\" value={customer.firstName} type=\"text\" onChange={handleChange} validate error=\"wrong\" success=\"right\" />\n                    <MDBInput label=\"Last Name\" icon=\"user\" name=\"lastName\" value={customer.lastName} type=\"email\" onChange={handleChange} validate error=\"wrong\"  success=\"right\" />\n                    </div>\n                    <MDBInput label=\"Email Address\" icon=\"envelope\" name=\"addressEmail\" value={customer.addressEmail} onChange={handleChange} type=\"email\" validate  error=\"wrong\" success=\"right\" />\n                    <MDBInput label=\"Phone Number\" icon=\"phone-alt\" name=\"phoneNumber\" value={customer.phoneNumber} onChange={handleChange} type=\"number\" validate  error=\"wrong\" success=\"right\" />\n                    <MDBInput label=\"Age\" icon=\"sort-numeric-up\" name=\"age\" value={customer.age}  type=\"number\" onChange={handleChange} validate  error=\"wrong\" success=\"right\" />\n                    <div className=\"md-form\">\n                      <MDBIcon icon=\"venus-mars\" size=\"2x\"/>\n                      <select onChange={handleChange} name=\"gender\" className=\"browser-default custom-select\">\n                          <option disabled selected hidden> Gender</option>\n                          <option value=\"female\" selected={customer.gender === 'female'}>Female</option>\n                          <option value=\"male\" selected={customer.gender === 'male'}>Male</option>\n                      </select>\n                    </div>\n                    <div>\n                      <MDBIcon icon=\"ring\" size=\"2x\"/>\n                      <select onChange={handleChange} name=\"martialStatus\" className=\"browser-default custom-select\">\n                          <option disabled selected hidden>Martial Status</option>\n                          <option value=\"single\" selected={customer.martialStatus === 'single'}>Single</option>\n                          <option value=\"married\" selected={customer.martialStatus === 'married'}>Married</option>\n                          <option value=\"widowed\" selected={customer.martialStatus === 'widowed'}>Widowed</option>\n                          <option value=\"divorced\" selected={customer.martialStatus === 'divorced'}>Divorced</option>\n                      </select>\n                    </div>\n                </div>\n            </form>\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn onClick={() => toggle()}>Close</MDBBtn>\n            <MDBBtn onClick={(evt) => editCustomer(evt)}>Save changes</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </MDBContainer>\n    );\n}\n\nexport default CustomerModal;","import Navigatior from \"./Navigatior\";\nimport CustomerModal from \"./CustomerModal\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Customers(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'First Name',\n                field: 'firstName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Last Name',\n                field: 'lastName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Email Address',\n                field: 'addressEmail',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Phone Number',\n                field: 'phoneNumber',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Gender',\n                field: 'gender',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Age',\n                field: 'age',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Martial Status',\n                field: 'martialStatus',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'customer',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: [] //TODO: read from redis cache\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState({\n        firstName: '',\n        lastName: '',\n        addressEmail: '',\n        phoneNumber: '',\n        gender: '',\n        age: '',\n        martialStatus: '',\n    });\n    const token = localStorage.getItem('token');\n\n    const addCustomers = () => {\n        setSelectedCustomer({\n            firstName: '',\n            lastName: '',\n            addressEmail: '',\n            phoneNumber: '',\n            gender: '',\n            age: '',\n            martialStatus: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n    \n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const customer = data.rows.find(row => row._id === target.id);\n        setSelectedCustomer(customer);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteCustomerById(token, target.id);\n        if (response) return history.push('/main/customers');\n        alert(response); \n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const consumers = await API.getCustomers(token);\n        const customerData = {...data};\n        consumers.forEach(consumer => {\n            consumer['customer'] = <>\n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => handleEdit(evt)}> <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        customerData.rows = consumers;\n        setData(customerData)\n    }\n\n    useEffect (() => {\n        fetchCustomers();\n    }, [showModal, data, selectedCustomer]);\n\n    return(\n        <div>\n            <Navigatior customersActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addCustomers() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <CustomerModal customer={selectedCustomer} setShowModal={setShowModal} showModal={showModal}></CustomerModal>}\n        </div>\n    )\n}\nexport default Customers","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput, MDBIcon } from 'mdbreact';\nconst API = require(\"../../api/main\").default;\n\nfunction DeviceModal(props) {\n    const [selectedDevice, setSelectedDevice] = useState(props.selectedDevice);\n    const history = useHistory();\n\n    const toggle = () => {\n      return props.setShowModal(!props.showModal);\n    }\n\n    const handleChange = (evt) => {\n      const { name, value } = evt.currentTarget || evt.target;\n      const data = {...selectedDevice};\n      data[name] = value;\n      setSelectedDevice(data);\n    }\n\n    const editDevice = async (evt) => {\n        try {\n            evt.preventDefault();\n            const result = await API.editDevice(selectedDevice, localStorage.getItem('token'));\n            if (result) {\n              toggle();\n              return history.push('/main/devices')\n            }\n            return console.log(\"opps try again\")\n          } catch(err) {\n            throw err;\n          }\n    }\n\n    return (\n      <MDBContainer>\n        <MDBModal isOpen={props.showModal} centered>\n          <MDBModalHeader>Add Devices</MDBModalHeader>\n          <MDBModalBody>\n            <form>\n                <div className=\"grey-text\">\n                    <MDBInput label=\"Car Age\" icon=\"sort-numeric-up\" name=\"carAge\" value={selectedDevice.carAge} type=\"number\" onChange={handleChange} validate error=\"wrong\" success=\"right\" />\n                    <MDBInput label=\"License Plate\" icon=\"car\" name=\"licensePlate\" value={selectedDevice.licensePlate} type=\"email\" onChange={handleChange} validate error=\"wrong\"  success=\"right\" />\n                    <div>\n                      <MDBIcon icon=\"user\" size=\"2x\"/>\n                      <select onChange={handleChange} name=\"customerId\" className=\"browser-default custom-select\">\n                      <option disabled selected hidden>Customer</option>\n                          {props.customers.map((customer)=> {\n                            return (<option selected={customer._id === selectedDevice.customerId} value={customer._id}> {customer.firstName + \"  \" + customer.lastName} </option>)\n                          })}\n                      </select>\n                      </div>\n                </div>\n            </form>\n          </MDBModalBody>\n          <MDBModalFooter>\n            <MDBBtn color=\"secondary\" onClick={() => toggle()}>Close</MDBBtn>\n            <MDBBtn color=\"primary\" onClick={(evt) => editDevice(evt)}>Save changes</MDBBtn>\n          </MDBModalFooter>\n        </MDBModal>\n      </MDBContainer>\n    );\n}\n\nexport default DeviceModal;","import Navigatior from \"./Navigatior\"\nimport React, { useEffect, useState } from 'react';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport DeviceModal from \"./DeviceModal\";\nimport { useHistory } from 'react-router-dom';\nconst API = require(\"../../api/main\").default;\n\nfunction Devices(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'Car Age',\n                field: 'carAge',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'License Plate',\n                field: 'licensePlate',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Customer',\n                field: 'customerName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'device',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: []\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [customers, setCustomers] = useState([]);\n    const [selectedDevice, setSelectedDevice] = useState({\n        carAge: '',\n        licensePlate: '',\n        customerId: '',\n        customerName: ''\n    });\n    const token = localStorage.getItem('token');\n\n    const addDevices = () => {\n        setSelectedDevice({\n            carAge: '',\n            licensePlate: '',\n            customerId: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const customers = await API.getCustomers(token);\n        setCustomers(customers)\n    }\n\n    const fetchCustomersById = (id) => {\n        return API.getCustomerById(token, id);\n    }\n\n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const device = data.rows.find(row => row._id === target.id);\n        setSelectedDevice(device);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteDeviceById(token, target.id);\n        if (response) return history.push('/main/devices');\n        alert(response); \n    }\n\n    \n    const fetchDevices = async () => {\n        //TODO: ADd fail catch\n        let devices = await API.getDevices(token);\n        devices = devices.map(async (device) => {\n            if (device.customerId) {\n                const customer = await fetchCustomersById(device.customerId);\n                device.customerName = customer.firstName + ' ' + customer.lastName;\n            }\n            return device;\n        })\n        const devicesData = {...data};\n        devices = await Promise.all(devices);\n        devices.forEach(devices => {\n            devices['device'] = <>\n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => handleEdit(evt)}>  <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        devicesData.rows = devices\n        setData(devicesData);\n    }\n\n    useEffect(() => {\n        if (showModal === true) fetchCustomers();\n        fetchDevices();\n    }, [showModal, data, selectedDevice]);\n\n    return(\n        <div>\n            <Navigatior devicesActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addDevices() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <DeviceModal setShowModal={setShowModal} selectedDevice={selectedDevice} customers={customers} showModal={showModal}></DeviceModal>}\n        </div>\n    )\n}\nexport default Devices","import { useState, useEffect } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput, MDBBtn } from 'mdbreact';\nimport Navigatior from \"./Navigatior\";\nimport '../../index.css';\nimport { useHistory } from 'react-router-dom';\nconst API = require(\"../../api/index\").default;\n\nfunction Profile(props) {\n    const [insuranceCompany, setInsuranceCompany] = useState({});\n    const history = useHistory();\n\n    const getLoggedUser = async () => {\n        const result = await API.getLoggedUser(localStorage.getItem('token'));\n        setInsuranceCompany(result);\n    }\n\n    const handleEdit = async(evt) => {\n      try {\n        evt.preventDefault();\n        const result = await API.updateProfile(localStorage.getItem('token'), insuranceCompany);\n        if (result) return history.push('/main/profile');\n        alert (\"We couldn't edit your profile!\");\n      } catch(err) {\n        alert (err.message)\n        throw err;\n      }\n    }\n\n    const handleOnChange = event => {\n        const { name, value } = event.currentTarget || event.target;\n        const data = {...insuranceCompany};\n        data[name] = value;\n        setInsuranceCompany(data);\n    };\n    useEffect (() => {\n        getLoggedUser();\n    }, []);\n\n    return(\n        <MDBContainer className=\"containerClass\">\n            <Navigatior profileActive=\"active\" />\n        <MDBRow className=\"rowClass\">\n          <MDBCol md=\"6\">\n            <MDBCard>\n              <MDBCardBody>\n                <form>\n                  <p className=\"h5 text-center py-4\"> Update Your Profile </p>\n                  <div className=\"grey-text\">\n                    <MDBInput  label=\"Name\" name=\"name\" icon=\"user\" type=\"text\" validate error=\"wrong\" success=\"right\" value={insuranceCompany.name} onChange={handleOnChange} />\n                    <MDBInput label=\"Location\" name=\"location\" icon=\"map-marker-alt\" type=\"text\" validate error=\"wrong\" success=\"right\" value={insuranceCompany.location} onChange={handleOnChange}/>\n                    <MDBInput label=\"Business License Number\" name=\"licenseNumber\" icon=\"id-card\"  type=\"text\" validate error=\"wrong\" success=\"right\" value={insuranceCompany.licenseNumber} onChange={handleOnChange}/>\n                    <MDBInput label=\"Address Email\" name=\"addressEmail\" icon=\"envelope\" type=\"email\"validate error=\"wrong\" success=\"right\" value={insuranceCompany.addressEmail} onChange={handleOnChange} />\n                    <MDBInput disabled label=\"Password\" name=\"password\" icon=\"lock\"  type=\"password\" validate value={insuranceCompany.password}  onChange={handleOnChange}/>\n                  </div>\n                  <div className=\"text-center py-4 mt-3\">\n                    <MDBBtn className=\"btn submit\" type=\"submit\" onClick={(evt) => handleEdit(evt)}>Update</MDBBtn>\n                  </div>\n                </form>\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n        </MDBRow>\n        </MDBContainer>\n    )\n}\nexport default Profile;","\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { Register, Login } from './components/auth/index';\nimport { Dashboard, Customers, Devices, Profile } from './components/main/index';\n\nfunction App() {\n\n    const isLogin = () => {\n        if (localStorage.getItem('token')) return true;\n        return false;\n    }\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" render={() => (isLogin() ?  <Redirect to=\"/main/dashboard\"/> : <Register/> )}  />\n                <Route exact path=\"/auth/register\" render={() => (isLogin() ? <Redirect to=\"/main/dashboard\"/> : <Register/> )} />\n                <Route exact path=\"/auth/login\"  render={() => (isLogin() ?  <Redirect to=\"/main/dashboard\"/> :   <Login/> )}/>\n                <Route exact path=\"/main\"  render={() => (isLogin() ?  <Dashboard/> :    <Redirect to=\"/auth/login\"/> )}/>\n                <Route exact path=\"/main/dashboard\"  render={() => (isLogin() ?  <Dashboard/> : <Redirect to=\"/auth/login\"/> )}/>\n                <Route exact path=\"/main/customers\"  render={() => (isLogin() ?  <Customers/> : <Redirect to=\"/auth/login\"/> )}/>\n                <Route exact path=\"/main/devices\"  render={() => (isLogin() ?  <Devices/> : <Redirect to=\"/auth/login\"/> )}/>\n                <Route exact path=\"/main/profile\"  render={() => (isLogin() ?  <Profile/> : <Redirect to=\"/auth/login\"/> )}/>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App;","import ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n","import axios from 'axios';\n\nconst BASE_URL =  'https://api-dot-neon-azimuth-333320.uc.r.appspot.com:8080';\n//TODO: ADD LOGSSS\n\n// CUSTOMER API\nconst editCustomer = async(customer, token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/main/editCustomer', \n        data: customer,\n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getCustomers = async(token) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getCustomers`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst getCustomerById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getCustomerById?customerId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst deleteCustomerById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/deleteCustomer?customerId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\n\n\n\n\n//DEVICE API\nconst editDevice = async(device, token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/main/editDevice', \n        data: device,\n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getDevices = async(token) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getDevices`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst deleteDeviceById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/deleteDevice?deviceId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getMachineGeneratedData = async(token, customerId) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getMachineGeneratedData?customerId=${customerId}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403 || result.statusCode === 103) return [];\n    return result;\n}\n\nconst addMachineGenerateData = async(token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + `/main/addMachineGeneratedData`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst apis = {\n    editCustomer,\n    getCustomers,\n    editDevice,\n    getDevices,\n    getCustomerById,\n    deleteCustomerById,\n    deleteDeviceById,\n    getMachineGeneratedData,\n    addMachineGenerateData\n}\nexport default apis;","import axios from 'axios';\n\nconst BASE_URL = 'https://api-dot-neon-azimuth-333320.uc.r.appspot.com:8080';\n//TODO: ADD LOGSSS\n\nconst register = async (insuranceCompany) => {\n    try {\n        const { data: result}  = await axios({\n            method: 'POST', \n            url: BASE_URL + '/register', \n            data: insuranceCompany,\n            headers: {\n                \"Access-Control-Allow-Origin\": \"\",\n                \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n            }\n        });\n        if (result.statusCode === 200) return true;\n        return false; \n    } catch (err) {\n        throw err;\n    }\n}\n\nconst login = async(authCredentials) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/login', \n        data: authCredentials\n    });\n    if (result.statusCode === 403 || result.statusCode === 400) return false;\n    return result;\n}\n\nconst getLoggedUser = async(token) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + '/getLoggedUser',\n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403 || result.statusCode === 400) return false;\n    return result;\n}\n\nconst updateProfile = async(token, insuranceCompany) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/editInsuranceCompany',\n        headers: {\n            \"auth-token\": token\n        },\n        data: insuranceCompany\n    });\n    if (result.statusCode === 403 || result.statusCode === 400) return false;\n    return true;\n}\n\nconst apis = {\n    register,\n    login,\n    getLoggedUser,\n    updateProfile\n}\nexport default apis;"],"sourceRoot":""}