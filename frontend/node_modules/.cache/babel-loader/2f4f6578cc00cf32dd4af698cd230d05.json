{"ast":null,"code":"var _jsxFileName = \"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx\",\n    _s = $RefreshSig$();\n\nimport Navigatior from \"./Navigatior\";\nimport React, { useEffect, useState } from 'react';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport DeviceModal from \"./DeviceModal\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst API = require(\"../../api/main\").default;\n\nfunction Devices(props) {\n  _s();\n\n  const history = useHistory();\n  const [data, setData] = useState({\n    columns: [{\n      label: 'Car Age',\n      field: 'carAge',\n      sort: 'asc',\n      width: 150\n    }, {\n      label: 'License Plate',\n      field: 'licensePlate',\n      sort: 'asc',\n      width: 150\n    }, {\n      label: 'Customer',\n      field: 'customerName',\n      sort: 'asc',\n      width: 150\n    }, {\n      label: 'Action',\n      field: 'device',\n      sort: 'asc',\n      width: 150\n    }],\n    rows: []\n  });\n  const [showModal, setShowModal] = useState(false);\n  const [customers, setCustomers] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState({\n    carAge: '',\n    licensePlate: '',\n    customerId: '',\n    customerName: ''\n  });\n  const token = localStorage.getItem('token');\n\n  const addDevices = () => {\n    setSelectedDevice({\n      carAge: '',\n      licensePlate: '',\n      customerId: ''\n    }); //Set a new one for every insert\n\n    return setShowModal(!showModal);\n  };\n\n  const fetchCustomers = async () => {\n    //TODO: ADd fail catch\n    const customers = await API.getCustomers(token);\n    setCustomers(customers);\n  };\n\n  const fetchCustomersById = id => {\n    return API.getCustomerById(token, id);\n  };\n\n  const handleEdit = evt => {\n    const target = evt.currentTarget || evt.target;\n    const device = data.rows.find(row => row._id === target.id);\n    setSelectedDevice(device);\n    return setShowModal(true);\n  };\n\n  const handleDelete = async evt => {\n    //TODO: Add popup component\n    const target = evt.currentTarget || evt.target;\n    const response = await API.deleteDeviceById(token, target.id);\n    if (response) return history.push('/main/devices');\n    alert(response);\n  };\n\n  const fetchDevices = async () => {\n    //TODO: ADd fail catch\n    let devices = await API.getDevices(token);\n    devices = devices.map(async device => {\n      if (device.customerId) {\n        const customer = await fetchCustomersById(device.customerId);\n        device.customerName = customer.firstName + ' ' + customer.lastName;\n      }\n\n      return device;\n    });\n    const devicesData = { ...data\n    };\n    devices = await Promise.all(devices);\n    devices.forEach(devices => {\n      devices['device'] = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MDBBtn, {\n          size: \"sm\",\n          id: devices._id,\n          onClick: evt => handleEdit(evt),\n          children: [\"  \", /*#__PURE__*/_jsxDEV(MDBIcon, {\n            icon: \"pencil-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 89\n          }, this), \"  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          size: \"sm\",\n          id: devices._id,\n          onClick: evt => {\n            handleDelete(evt);\n          },\n          children: [\"  \", /*#__PURE__*/_jsxDEV(MDBIcon, {\n            icon: \"trash-alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 93\n          }, this), \"  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    });\n    devicesData.rows = devices;\n    setData(devicesData);\n  };\n\n  useEffect(() => {\n    if (showModal === true) fetchCustomers();\n    fetchDevices();\n  }, [showModal, data, selectedDevice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigatior, {\n      devicesActive: \"active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tableStyle\",\n      children: [/*#__PURE__*/_jsxDEV(MDBBtn, {\n        onClick: () => {\n          addDevices();\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(MDBIcon, {\n          icon: \"plus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 59\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MDBDataTable, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(DeviceModal, {\n      setShowModal: setShowModal,\n      selectedDevice: selectedDevice,\n      customers: customers,\n      showModal: showModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Devices, \"9YOR3MgXjU5F4+vwunF4GyKP3lA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Devices;\nexport default Devices;\n\nvar _c;\n\n$RefreshReg$(_c, \"Devices\");","map":{"version":3,"sources":["/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx"],"names":["Navigatior","React","useEffect","useState","MDBDataTable","MDBBtn","MDBIcon","DeviceModal","useHistory","API","require","default","Devices","props","history","data","setData","columns","label","field","sort","width","rows","showModal","setShowModal","customers","setCustomers","selectedDevice","setSelectedDevice","carAge","licensePlate","customerId","customerName","token","localStorage","getItem","addDevices","fetchCustomers","getCustomers","fetchCustomersById","id","getCustomerById","handleEdit","evt","target","currentTarget","device","find","row","_id","handleDelete","response","deleteDeviceById","push","alert","fetchDevices","devices","getDevices","map","customer","firstName","lastName","devicesData","Promise","all","forEach"],"mappings":"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","sourcesContent":["import Navigatior from \"./Navigatior\"\nimport React, { useEffect, useState } from 'react';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport DeviceModal from \"./DeviceModal\";\nimport { useHistory } from 'react-router-dom';\nconst API = require(\"../../api/main\").default;\n\nfunction Devices(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'Car Age',\n                field: 'carAge',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'License Plate',\n                field: 'licensePlate',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Customer',\n                field: 'customerName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'device',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: []\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [customers, setCustomers] = useState([]);\n    const [selectedDevice, setSelectedDevice] = useState({\n        carAge: '',\n        licensePlate: '',\n        customerId: '',\n        customerName: ''\n    });\n    const token = localStorage.getItem('token');\n\n    const addDevices = () => {\n        setSelectedDevice({\n            carAge: '',\n            licensePlate: '',\n            customerId: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const customers = await API.getCustomers(token);\n        setCustomers(customers)\n    }\n\n    const fetchCustomersById = (id) => {\n        return API.getCustomerById(token, id);\n    }\n\n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const device = data.rows.find(row => row._id === target.id);\n        setSelectedDevice(device);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteDeviceById(token, target.id);\n        if (response) return history.push('/main/devices');\n        alert(response); \n    }\n\n    \n    const fetchDevices = async () => {\n        //TODO: ADd fail catch\n        let devices = await API.getDevices(token);\n        devices = devices.map(async (device) => {\n            if (device.customerId) {\n                const customer = await fetchCustomersById(device.customerId);\n                device.customerName = customer.firstName + ' ' + customer.lastName;\n            }\n            return device;\n        })\n        const devicesData = {...data};\n        devices = await Promise.all(devices);\n        devices.forEach(devices => {\n            devices['device'] = <>\n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => handleEdit(evt)}>  <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        devicesData.rows = devices\n        setData(devicesData);\n    }\n\n    useEffect(() => {\n        if (showModal === true) fetchCustomers();\n        fetchDevices();\n    }, [showModal, data, selectedDevice]);\n\n    return(\n        <div>\n            <Navigatior devicesActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addDevices() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <DeviceModal setShowModal={setShowModal} selectedDevice={selectedDevice} customers={customers} showModal={showModal}></DeviceModal>}\n        </div>\n    )\n}\nexport default Devices"]},"metadata":{},"sourceType":"module"}