{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://localhost:5001'; //TODO: ADD LOGSSS\n// CUSTOMER API\n\nconst editCustomer = async (customer, token) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'POST',\n    url: BASE_URL + '/main/editCustomer',\n    data: customer,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return true;\n};\n\nconst getCustomers = async token => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/getCustomers`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return result;\n};\n\nconst getCustomerById = async (token, id) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/getCustomerById?customerId=${id}`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return result;\n};\n\nconst deleteCustomerById = async (token, id) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/deleteCustomer?customerId=${id}`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return true;\n}; //DEVICE API\n\n\nconst editDevice = async (device, token) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'POST',\n    url: BASE_URL + '/main/editDevice',\n    data: device,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return true;\n};\n\nconst getDevices = async token => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/getDevices`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return result;\n};\n\nconst deleteDeviceById = async (token, id) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/deleteDevice?deviceId=${id}`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return true;\n};\n\nconst getMachineGeneratedData = async (token, customerId) => {\n  const {\n    data: result\n  } = await axios({\n    method: 'GET',\n    url: BASE_URL + `/main/getMachineGeneratedData?customerId=${customerId}`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403 || result.statusCode === 103) return [];\n  return result;\n};\n\nconst addMachineGenerateData = async token => {\n  const {\n    data: result\n  } = await axios({\n    method: 'POST',\n    url: BASE_URL + `/main/addMachineGeneratedData`,\n    headers: {\n      \"auth-token\": token\n    }\n  });\n  if (result.statusCode === 403) return false;\n  return true;\n};\n\nconst apis = {\n  editCustomer,\n  getCustomers,\n  editDevice,\n  getDevices,\n  getCustomerById,\n  deleteCustomerById,\n  deleteDeviceById,\n  getMachineGeneratedData,\n  addMachineGenerateData\n};\nexport default apis;","map":{"version":3,"sources":["/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/main.js"],"names":["axios","BASE_URL","editCustomer","customer","token","data","result","method","url","headers","statusCode","getCustomers","getCustomerById","id","deleteCustomerById","editDevice","device","getDevices","deleteDeviceById","getMachineGeneratedData","customerId","addMachineGenerateData","apis"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL =  'http://localhost:5001';\n//TODO: ADD LOGSSS\n\n// CUSTOMER API\nconst editCustomer = async(customer, token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/main/editCustomer', \n        data: customer,\n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getCustomers = async(token) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getCustomers`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst getCustomerById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getCustomerById?customerId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst deleteCustomerById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/deleteCustomer?customerId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\n\n\n\n\n//DEVICE API\nconst editDevice = async(device, token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + '/main/editDevice', \n        data: device,\n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getDevices = async(token) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getDevices`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return result;\n}\n\nconst deleteDeviceById = async(token, id) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/deleteDevice?deviceId=${id}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst getMachineGeneratedData = async(token, customerId) => {\n    const { data: result} = await axios({\n        method: 'GET', \n        url: BASE_URL + `/main/getMachineGeneratedData?customerId=${customerId}`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403 || result.statusCode === 103) return [];\n    return result;\n}\n\nconst addMachineGenerateData = async(token) => {\n    const { data: result} = await axios({\n        method: 'POST', \n        url: BASE_URL + `/main/addMachineGeneratedData`, \n        headers: {\n            \"auth-token\": token\n        }\n    });\n    if (result.statusCode === 403) return false;\n    return true;\n}\n\nconst apis = {\n    editCustomer,\n    getCustomers,\n    editDevice,\n    getDevices,\n    getCustomerById,\n    deleteCustomerById,\n    deleteDeviceById,\n    getMachineGeneratedData,\n    addMachineGenerateData\n}\nexport default apis;"]},"metadata":{},"sourceType":"module"}