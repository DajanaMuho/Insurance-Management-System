{"ast":null,"code":"var _jsxFileName = \"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Navigatior from \"./Navigatior\";\nimport '../../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst API = require(\"../../api/main\").default;\n\nfunction Dashboard(props) {\n  _s();\n\n  const token = localStorage.getItem('token');\n  const [customers, setCustomers] = useState([]);\n  const storageSelectedCustomer = localStorage.getItem('selectedCustomer');\n  const [selectedCustomer, setSelectedCustomer] = useState(storageSelectedCustomer ? JSON.parse(storageSelectedCustomer) : {\n    id: null,\n    name: \"Choose Customer\"\n  });\n  let [predictedClaimValue, setPredictedClaimValue] = useState(false);\n  let [predictedClaimAmount, setPredictedClaimAmount] = useState(0);\n  const [leftIntensity, setleftIntensity] = useState({\n    labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n    datasets: [{\n      label: \"Left Turn Intensity\",\n      fill: true,\n      lineTension: 0.3,\n      backgroundColor: \"rgba(225, 204,230, .3)\",\n      borderColor: \"rgb(205, 130, 158)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(205, 130,1 58)\",\n      pointBackgroundColor: \"rgb(255, 255, 255)\",\n      pointBorderWidth: 10,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n      pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }]\n  });\n  const [timeOnTheRoadLine, setTimeOnTheRoadLine] = useState({\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [{\n      label: \"Annual Percentage Of Time On The Road\",\n      fill: true,\n      lineTension: 0.3,\n      backgroundColor: \"rgba(225, 204,230, .3)\",\n      borderColor: \"rgb(205, 130, 158)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(205, 130,1 58)\",\n      pointBackgroundColor: \"rgb(255, 255, 255)\",\n      pointBorderWidth: 10,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n      pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }]\n  });\n  const [rightItensity, setRightItensity] = useState({\n    labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n    datasets: [{\n      label: \"Right Turn Intensity\",\n      fill: true,\n      lineTension: 0.3,\n      backgroundColor: \"rgba(225, 204,230, .3)\",\n      borderColor: \"rgb(205, 130, 158)\",\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBorderColor: \"rgb(205, 130,1 58)\",\n      pointBackgroundColor: \"rgb(255, 255, 255)\",\n      pointBorderWidth: 10,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n      pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }]\n  });\n  const [barChartAcc, setBarChartAcc] = useState({\n    labels: ['Accel.06miles', 'Accel.08miles', 'Accel.09miles', 'Accel.11miles', 'Accel.12miles', 'Accel.14miles'],\n    datasets: [{\n      label: 'Sudden Acceleration',\n      data: [],\n      backgroundColor: ['rgba(255, 85, 136, 0.2)', 'rgba(251, 147, 42, 0.2)', 'rgba(254, 186, 29, 0.2)', 'rgba(44, 217, 217, 0.2)', 'rgba(25, 137, 213, 0.2)', 'rgba(153, 102, 255, 0.2)']\n    }]\n  });\n  const [barChartBrake, setBarChartBrake] = useState({\n    labels: [\"Brake.06miles\", \"Brake.08miles\", \"Brake.09miles\", \"Brake.11miles\", \"Brake.12miles\", \"Brake.14miles\"],\n    datasets: [{\n      label: 'Sudden Brakes',\n      data: [],\n      backgroundColor: ['rgba(255, 85, 136, 0.2)', 'rgba(251, 147, 42, 0.2)', 'rgba(254, 186, 29, 0.2)', 'rgba(44, 217, 217, 0.2)', 'rgba(25, 137, 213, 0.2)', 'rgba(153, 102, 255, 0.2)']\n    }]\n  });\n\n  const fetchCustomers = async () => {\n    //TODO: ADd fail catch\n    const customers = await API.getCustomers(token);\n    setCustomers(customers);\n  };\n\n  const selectCustomer = evt => {\n    const target = evt.target;\n    const customer = {\n      id: target.value,\n      name: target.textContent\n    };\n    setSelectedCustomer(customer);\n    localStorage.setItem('selectedCustomer', JSON.stringify(customer));\n    getMachineGeneratedData();\n  };\n\n  const getMachineGeneratedData = async () => {\n    const result = await API.getMachineGeneratedData(token, selectedCustomer.id); //CHARTS\n\n    let left = [],\n        time = [],\n        right = [],\n        acc = [],\n        brake = [],\n        value = false,\n        amount = 0;\n    (result || []).forEach(data => {\n      left.push(data['Left_turn_intensity08'], data['Left_turn_intensity09'], data['Left_turn_intensity10'], data['Left_turn_intensity11'], data['Left_turn_intensity12']);\n      time.push(data['Pct_drive_mon'], data['Pct_drive_tue'], data['Pct_drive_wed'], data['Pct_drive_thr'], data['Pct_drive_fri'], data['Pct_drive_sat'], data['Pct_drive_sun']);\n      right.push(data['Right_turn_intensity08'], data['Right_turn_intensity09'], data['Right_turn_intensity10'], data['Right_turn_intensity11'], data['Right_turn_intensity12']);\n      acc.push(data['Accel_06miles'], data['Accel_08miles'], data['Accel_09miles'], data['Accel_11miles'], data['Accel_12miles'], data['Accel_14miles']);\n      brake.push(data['Brake_06miles'], data['Brake_08miles'], data['Brake_09miles'], data['Brake_11miles'], data['Brake_12miles'], data['Brake_14miles']);\n      value = data.predictedClaimValue;\n      amount = data.predictedClaimAmount;\n    });\n    leftIntensity.datasets[0].data = left;\n    timeOnTheRoadLine.datasets[0].data = time;\n    rightItensity.datasets[0].data = right;\n    barChartAcc.datasets[0].data = acc;\n    barChartBrake.datasets[0].data = brake;\n    setleftIntensity(leftIntensity);\n    setTimeOnTheRoadLine(timeOnTheRoadLine);\n    setRightItensity(rightItensity);\n    setBarChartAcc(barChartAcc);\n    setBarChartBrake(barChartBrake);\n    setPredictedClaimValue(value);\n    setPredictedClaimAmount(amount);\n  };\n\n  const addMachineGeneratedData = async () => {\n    setInterval(async () => {\n      await API.addMachineGenerateData(token);\n    }, 43200000); //Every 12 hours\n  };\n\n  useEffect(() => {\n    // addMachineGeneratedData(); Import data to db before\n    fetchCustomers();\n    getMachineGeneratedData();\n  }, [customers]); //,leftIntensityChart, timeOnRoadChart, rightIntensityChart, accChart, brakeChart])\n\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    className: \"dashboardGrid\",\n    children: [/*#__PURE__*/_jsxDEV(Navigatior, {\n      dashboardActive: \"active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n      className: \"notification\",\n      children: [/*#__PURE__*/_jsxDEV(MDBDropdown, {\n        dropleft: true,\n        children: [/*#__PURE__*/_jsxDEV(MDBDropdownToggle, {\n          caret: true,\n          children: selectedCustomer.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MDBDropdownMenu, {\n          basic: true,\n          children: customers.map(customer => {\n            return /*#__PURE__*/_jsxDEV(MDBDropdownItem, {\n              value: customer._id,\n              active: selectedCustomer.id === customer._id ? true : false,\n              onClick: evt => selectCustomer(evt),\n              children: [\" \", customer.firstName + \"  \" + customer.lastName, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), selectedCustomer.id && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"p-3\",\n        children: [\" According to ML model there is a\", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-success d-inline \",\n          children: [\" \", predictedClaimValue ? 'higher' : 'lower', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 37\n        }, this), \"chance of customer proclaming a claim. Amount:  \", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-weight-bold d-inline \",\n          children: predictedClaimAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n      children: [/*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: leftIntensity,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: timeOnTheRoadLine,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: rightItensity,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: barChartAcc,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MDBCol, {\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: barChartBrake,\n          options: {\n            responsive: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"qmna8n/oHSIyKP4i30rNpkWiNcg=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx"],"names":["useEffect","useState","MDBDropdown","MDBDropdownToggle","MDBDropdownMenu","MDBDropdownItem","MDBContainer","MDBRow","MDBCol","Bar","Line","Navigatior","API","require","default","Dashboard","props","token","localStorage","getItem","customers","setCustomers","storageSelectedCustomer","selectedCustomer","setSelectedCustomer","JSON","parse","id","name","predictedClaimValue","setPredictedClaimValue","predictedClaimAmount","setPredictedClaimAmount","leftIntensity","setleftIntensity","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","timeOnTheRoadLine","setTimeOnTheRoadLine","rightItensity","setRightItensity","barChartAcc","setBarChartAcc","barChartBrake","setBarChartBrake","fetchCustomers","getCustomers","selectCustomer","evt","target","customer","value","textContent","setItem","stringify","getMachineGeneratedData","result","left","time","right","acc","brake","amount","forEach","push","addMachineGeneratedData","setInterval","addMachineGenerateData","map","_id","firstName","lastName","responsive"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Navigatior from \"./Navigatior\";\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Dashboard(props) {\n    const token = localStorage.getItem('token');\n    const [customers, setCustomers] = useState([]);\n    const storageSelectedCustomer = localStorage.getItem('selectedCustomer');\n    const [selectedCustomer, setSelectedCustomer] = useState(storageSelectedCustomer ? JSON.parse(storageSelectedCustomer) : {id: null, name: \"Choose Customer\"});\n    let [predictedClaimValue, setPredictedClaimValue] = useState(false);\n    let [predictedClaimAmount, setPredictedClaimAmount] = useState(0);\n  \n    const [leftIntensity, setleftIntensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Left Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(225, 204,230, .3)\",\n            borderColor: \"rgb(205, 130, 158)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(205, 130,1 58)\",\n            pointBackgroundColor: \"rgb(255, 255, 255)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n        }]\n    })\n    const [timeOnTheRoadLine, setTimeOnTheRoadLine] = useState({\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n        datasets: [{\n            label: \"Annual Percentage Of Time On The Road\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(225, 204,230, .3)\",\n            borderColor: \"rgb(205, 130, 158)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(205, 130,1 58)\",\n            pointBackgroundColor: \"rgb(255, 255, 255)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: []\n        }]\n    });\n    const [rightItensity, setRightItensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Right Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(225, 204,230, .3)\",\n            borderColor: \"rgb(205, 130, 158)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(205, 130,1 58)\",\n            pointBackgroundColor: \"rgb(255, 255, 255)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: []\n        }]\n    });\n    const [barChartAcc, setBarChartAcc] = useState({\n        labels: ['Accel.06miles', 'Accel.08miles', 'Accel.09miles', 'Accel.11miles', 'Accel.12miles', 'Accel.14miles'],\n        datasets: [{\n            label: 'Sudden Acceleration',\n            data: [],\n            backgroundColor: [\n                'rgba(255, 85, 136, 0.2)',\n                'rgba(251, 147, 42, 0.2)',\n                'rgba(254, 186, 29, 0.2)',\n                'rgba(44, 217, 217, 0.2)',\n                'rgba(25, 137, 213, 0.2)',\n                'rgba(153, 102, 255, 0.2)'\n            ],\n        }]\n    });\n    const [barChartBrake, setBarChartBrake] = useState({\n        labels: [\"Brake.06miles\", \"Brake.08miles\", \"Brake.09miles\", \"Brake.11miles\", \"Brake.12miles\", \"Brake.14miles\"],\n        datasets: [{\n            label: 'Sudden Brakes',\n            data: [],\n            backgroundColor: [\n                'rgba(255, 85, 136, 0.2)',\n                'rgba(251, 147, 42, 0.2)',\n                'rgba(254, 186, 29, 0.2)',\n                'rgba(44, 217, 217, 0.2)',\n                'rgba(25, 137, 213, 0.2)',\n                'rgba(153, 102, 255, 0.2)'\n            ],\n        }]\n    });\n    \n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const customers = await API.getCustomers(token);\n        setCustomers(customers);\n    }\n    \n    const selectCustomer = (evt) => {\n        const target = evt.target;\n        const customer = {id: target.value, name: target.textContent};\n        setSelectedCustomer(customer);\n        localStorage.setItem('selectedCustomer', JSON.stringify(customer));\n        getMachineGeneratedData();\n    }\n\n    const getMachineGeneratedData = async () => {\n        const result = await API.getMachineGeneratedData(token, selectedCustomer.id);\n        //CHARTS\n        let left = [], time = [], right = [], acc = [], brake = [], value = false, amount = 0;\n        (result || []).forEach(data => {\n            left.push(data['Left_turn_intensity08'], data['Left_turn_intensity09'], data['Left_turn_intensity10'], data['Left_turn_intensity11'], data['Left_turn_intensity12']);\n            time.push(data['Pct_drive_mon'], data['Pct_drive_tue'], data['Pct_drive_wed'], data['Pct_drive_thr'], data['Pct_drive_fri'], data['Pct_drive_sat'], data['Pct_drive_sun']);\n            right.push(data['Right_turn_intensity08'], data['Right_turn_intensity09'], data['Right_turn_intensity10'], data['Right_turn_intensity11'], data['Right_turn_intensity12']);\n            acc.push(data['Accel_06miles'], data['Accel_08miles'], data['Accel_09miles'], data['Accel_11miles'], data['Accel_12miles'], data['Accel_14miles']);\n            brake.push(data['Brake_06miles'], data['Brake_08miles'], data['Brake_09miles'], data['Brake_11miles'], data['Brake_12miles'], data['Brake_14miles']);\n            value = data.predictedClaimValue;\n            amount = data.predictedClaimAmount;\n        });\n        leftIntensity.datasets[0].data = left;\n        timeOnTheRoadLine.datasets[0].data = time;\n        rightItensity.datasets[0].data = right;\n        barChartAcc.datasets[0].data = acc;\n        barChartBrake.datasets[0].data = brake;\n        setleftIntensity(leftIntensity);\n        setTimeOnTheRoadLine(timeOnTheRoadLine);\n        setRightItensity(rightItensity);\n        setBarChartAcc(barChartAcc);\n        setBarChartBrake(barChartBrake);\n        setPredictedClaimValue(value);\n        setPredictedClaimAmount(amount);\n    }\n\n    const addMachineGeneratedData = async () => {\n        setInterval(async() => {\n           await API.addMachineGenerateData(token)\n        }, 43200000); //Every 12 hours\n    }\n\n    useEffect(() => {\n        // addMachineGeneratedData(); Import data to db before\n        fetchCustomers();\n        getMachineGeneratedData();\n    }, [customers]) //,leftIntensityChart, timeOnRoadChart, rightIntensityChart, accChart, brakeChart])\n\n    return(\n        <MDBContainer className=\"dashboardGrid\">\n            <Navigatior dashboardActive=\"active\" />\n            <MDBRow className=\"notification\">\n                <MDBDropdown dropleft>\n                    <MDBDropdownToggle caret>\n                        {selectedCustomer.name}\n                    </MDBDropdownToggle>\n                    <MDBDropdownMenu basic>\n                        {customers.map((customer)=> {\n                            return (<MDBDropdownItem value={customer._id} active={selectedCustomer.id === customer._id ? true : false} \n                                onClick={(evt) => selectCustomer(evt)}> {customer.firstName + \"  \" + customer.lastName} </MDBDropdownItem>)\n                        })}\n                    </MDBDropdownMenu>\n                    </MDBDropdown>\n                    {selectedCustomer.id &&\n                        <span className=\"p-3\"> According to ML model there is a\n                                    <p className=\"text-success d-inline \"> {predictedClaimValue ? 'higher' : 'lower'} </p> \n                                    chance of customer proclaming a claim. \n                                    Amount:  <p className=\"font-weight-bold d-inline \">{predictedClaimAmount}</p>\n                        </span> \n                    }\n            </MDBRow>\n            <MDBRow>\n                 <MDBCol>\n                    <Line data={leftIntensity} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={timeOnTheRoadLine} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={rightItensity} options={{ responsive: true }} />\n                </MDBCol>\n            </MDBRow>\n            <MDBRow>\n                <div className=\"w-100\" />\n                <MDBCol> \n                    <Bar data={barChartAcc} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol> \n                    <Bar data={barChartBrake} options={{ responsive: true }} />\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    )\n}\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}