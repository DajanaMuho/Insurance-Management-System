[{"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/index.js":"1","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/App.js":"2","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/index.jsx":"3","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/index.jsx":"4","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx":"5","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx":"6","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Customers.jsx":"7","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Register.jsx":"8","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Profile.jsx":"9","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Login.jsx":"10","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/index.js":"11","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/main.js":"12","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Navigatior.jsx":"13","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/DeviceModal.jsx":"14","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/CustomerModal.jsx":"15"},{"size":263,"mtime":1637827210225,"results":"16","hashOfConfig":"17"},{"size":1615,"mtime":1638216071207,"results":"18","hashOfConfig":"17"},{"size":189,"mtime":1637827210225,"results":"19","hashOfConfig":"17"},{"size":89,"mtime":1637827210225,"results":"20","hashOfConfig":"17"},{"size":10375,"mtime":1638216022330,"results":"21","hashOfConfig":"17"},{"size":4119,"mtime":1637827210225,"results":"22","hashOfConfig":"17"},{"size":4270,"mtime":1637827210225,"results":"23","hashOfConfig":"17"},{"size":3909,"mtime":1638230566354,"results":"24","hashOfConfig":"17"},{"size":2983,"mtime":1637827210225,"results":"25","hashOfConfig":"17"},{"size":3222,"mtime":1638230559218,"results":"26","hashOfConfig":"17"},{"size":1723,"mtime":1638200873666,"results":"27","hashOfConfig":"17"},{"size":3245,"mtime":1638200877454,"results":"28","hashOfConfig":"17"},{"size":1894,"mtime":1638230569586,"results":"29","hashOfConfig":"17"},{"size":2705,"mtime":1637827210225,"results":"30","hashOfConfig":"17"},{"size":4006,"mtime":1637827210225,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"g702tn",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/index.js",[],["66","67"],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/App.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/index.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/index.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx",["68","69"],"import { useEffect, useState } from 'react';\nimport { MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport { Bar, Line } from \"react-chartjs-2\";\nimport Navigatior from \"./Navigatior\";\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Dashboard(props) {\n    const token = localStorage.getItem('token');\n    const [customers, setCustomers] = useState([]);\n    const storageSelectedCustomer = localStorage.getItem('selectedCustomer');\n    const [selectedCustomer, setSelectedCustomer] = useState(storageSelectedCustomer ? JSON.parse(storageSelectedCustomer) : {id: null, name: \"Choose Customer\"});\n    const [predictedClaimValue, setPredictedClaimValue] = useState(localStorage.getItem('predictedValue') ? JSON.parse(localStorage.getItem('predictedValue')) :false)\n  \n    const [leftIntensity, setleftIntensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Left Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(175, 175, 65, .3)\",\n            borderColor: \"rgb(175, 175, 65)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(86, 96, 64)\",\n            pointBackgroundColor: \"rgb(78, 55, 3)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: localStorage.getItem('left') ? JSON.parse(localStorage.getItem('left')) : []\n        }]\n    })\n    const [timeOnTheRoadLine, setTimeOnTheRoadLine] = useState({\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n        datasets: [{\n            label: \"Annual Percentage Of Time On The Road\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(213, 248, 255, .3)\",\n            borderColor: \"rgb(133, 179, 209, 1.00)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(0, 27, 67)\",\n            pointBackgroundColor: \"rgb(0, 27, 67, .5)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: localStorage.getItem('time') ? JSON.parse(localStorage.getItem('time')) : []\n        }]\n    });\n    const [rightItensity, setRightItensity] = useState({\n        labels: [\"Intensity08\", \"Intensity09\", \"Intensity10\", \"Intensity11\", \"Intensity12\"],\n        datasets: [{\n            label: \"Right Turn Intensity\",\n            fill: true,\n            lineTension: 0.3,\n            backgroundColor: \"rgba(251, 221, 118, .5)\",\n            borderColor: \"rgb(249, 212, 85)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgb(111, 88, 0)\",\n            pointBackgroundColor: \"rgb(41, 32, 2)\",\n            pointBorderWidth: 10,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data:  localStorage.getItem('right') ? JSON.parse(localStorage.getItem('right')) : []\n        }]\n    });\n    const [barChartAcc, setBarChartAcc] = useState({\n        labels: ['Accel.06miles', 'Accel.08miles', 'Accel.09miles', 'Accel.11miles', 'Accel.12miles', 'Accel.14miles'],\n        datasets: [{\n            label: 'Sudden Acceleration',\n            data:  localStorage.getItem('acc') ? JSON.parse(localStorage.getItem('acc')) : [],\n            backgroundColor: [\n                'rgba(72, 123, 177, .5)',\n                'rgba(175, 175, 65, .5)',\n                'rgba(175, 96, 65, .5)',\n                'rgba(172, 232, 120, .5)',\n                'rgba(90, 81, 2, .5)',\n                'rgba(251, 221, 118, .5)'\n            ],\n        }]\n    });\n    const [barChartBrake, setBarChartBrake] = useState({\n        labels: [\"Brake.06miles\", \"Brake.08miles\", \"Brake.09miles\", \"Brake.11miles\", \"Brake.12miles\", \"Brake.14miles\"],\n        datasets: [{\n            label: 'Sudden Brakes',\n            data:  localStorage.getItem('brake') ? JSON.parse(localStorage.getItem('brake')) : [],\n            backgroundColor: [\n                'rgba(72, 123, 177, .5)',\n                'rgba(175, 175, 65, .5)',\n                'rgba(175, 96, 65, .5)',\n                'rgba(172, 232, 120, .5)',\n                'rgba(90, 81, 2, .5)',\n                'rgba(251, 221, 118, .5)'\n            ],\n        }]\n    });\n    \n    const fetchCustomers = async () => {\n        try {\n        const customers = await API.getCustomers(token);\n        setCustomers(customers);\n        } catch (err){\n            alert(err);\n        }\n    }\n    \n    const selectCustomer = async (evt) => {\n        const target = evt.target;\n        const customer = {id: target.value, name: target.textContent};\n        await getMachineGeneratedData(customer.id);\n        localStorage.setItem('selectedCustomer', JSON.stringify(customer));\n        setSelectedCustomer(customer);\n        window.location.reload(true)\n    }\n\n    const getMachineGeneratedData = async (customerId) => {\n        const result = await API.getMachineGeneratedData(token, customerId);\n        let left = [], time = [], right = [], acc = [], brake = [], value = false;\n        (result || []).forEach(data => {\n            left.push(data['Left_turn_intensity08'], data['Left_turn_intensity09'], data['Left_turn_intensity10'], data['Left_turn_intensity11'], data['Left_turn_intensity12']);\n            time.push(data['Pct_drive_mon'], data['Pct_drive_tue'], data['Pct_drive_wed'], data['Pct_drive_thr'], data['Pct_drive_fri'], data['Pct_drive_sat'], data['Pct_drive_sun']);\n            right.push(data['Right_turn_intensity08'], data['Right_turn_intensity09'], data['Right_turn_intensity10'], data['Right_turn_intensity11'], data['Right_turn_intensity12']);\n            acc.push(data['Accel_06miles'], data['Accel_08miles'], data['Accel_09miles'], data['Accel_11miles'], data['Accel_12miles'], data['Accel_14miles']);\n            brake.push(data['Brake_06miles'], data['Brake_08miles'], data['Brake_09miles'], data['Brake_11miles'], data['Brake_12miles'], data['Brake_14miles']);\n            value = data.predictedClaimValue;\n        });\n        leftIntensity.datasets[0].data = left;\n        localStorage.setItem('left', JSON.stringify(left));\n        timeOnTheRoadLine.datasets[0].data = time;\n        localStorage.setItem('time', JSON.stringify(time));\n        rightItensity.datasets[0].data = right;\n        localStorage.setItem('right', JSON.stringify(right));\n        barChartAcc.datasets[0].data = acc;\n        localStorage.setItem('acc',JSON.stringify(acc));\n        barChartBrake.datasets[0].data = brake;\n        localStorage.setItem('brake',JSON.stringify(brake));\n        setleftIntensity(leftIntensity);\n        setTimeOnTheRoadLine(timeOnTheRoadLine);\n        setRightItensity(rightItensity);\n        setBarChartAcc(barChartAcc);\n        setBarChartBrake(barChartBrake);\n        localStorage.setItem('predictedValue', JSON.stringify(value));\n        setPredictedClaimValue(value);\n    }\n\n    const addMachineGeneratedData = async () => {\n        setInterval(async() => {\n           await API.addMachineGenerateData(token)\n        }, 43200000); //Every 12 hours\n    }\n\n    useEffect(() => {\n        fetchCustomers();\n    }, [customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake])\n\n\n    return(\n        <MDBContainer className=\"dashboardGrid\">\n            <Navigatior dashboardActive=\"active\" />\n            <MDBRow className=\"notification\">\n                <MDBDropdown dropleft>\n                    <MDBDropdownToggle caret>\n                        {selectedCustomer.name}\n                    </MDBDropdownToggle>\n                    <MDBDropdownMenu basic>\n                        {customers.map((customer)=> {\n                            return (<MDBDropdownItem value={customer._id} active={selectedCustomer.id === customer._id ? true : false} \n                                onClick={(evt) => selectCustomer(evt)}> {customer.firstName + \"  \" + customer.lastName} </MDBDropdownItem>)\n                        })}\n                    </MDBDropdownMenu>\n                    </MDBDropdown>\n                    {selectedCustomer.id &&\n                        <span className=\"p-3\"> According to Machine Learning model there is a \n                                <p className={predictedClaimValue ? \"text-success d-inline\" : \"text-danger d-inline\"}> {predictedClaimValue ? 'higher' : 'lower'} </p> \n                                 chance of customer making an insurance claim.\n                        </span> \n                    }\n            </MDBRow>\n            { selectedCustomer.id &&\n                 <MDBRow>\n                 <MDBCol>\n                    <Line data={leftIntensity} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={timeOnTheRoadLine} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol>\n                    <Line data={rightItensity} options={{ responsive: true }} />\n                </MDBCol>\n            </MDBRow>\n            }\n            { selectedCustomer.id &&\n            <MDBRow>\n                <div className=\"w-100\" />\n                <MDBCol> \n                    <Bar data={barChartAcc} options={{ responsive: true }} />\n                </MDBCol>\n                <MDBCol> \n                    <Bar data={barChartBrake} options={{ responsive: true }} />\n                </MDBCol>\n                </MDBRow>\n            }\n        </MDBContainer>\n    )\n}\nexport default Dashboard","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx",["70"],"import Navigatior from \"./Navigatior\"\nimport React, { useEffect, useState } from 'react';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport DeviceModal from \"./DeviceModal\";\nimport { useHistory } from 'react-router-dom';\nconst API = require(\"../../api/main\").default;\n\nfunction Devices(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'Car Age',\n                field: 'carAge',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'License Plate',\n                field: 'licensePlate',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Customer',\n                field: 'customerName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'device',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: []\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [customers, setCustomers] = useState([]);\n    const [selectedDevice, setSelectedDevice] = useState({\n        carAge: '',\n        licensePlate: '',\n        customerId: '',\n        customerName: ''\n    });\n    const token = localStorage.getItem('token');\n\n    const addDevices = () => {\n        setSelectedDevice({\n            carAge: '',\n            licensePlate: '',\n            customerId: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const customers = await API.getCustomers(token);\n        setCustomers(customers)\n    }\n\n    const fetchCustomersById = (id) => {\n        return API.getCustomerById(token, id);\n    }\n\n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const device = data.rows.find(row => row._id === target.id);\n        setSelectedDevice(device);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteDeviceById(token, target.id);\n        if (response) return history.push('/main/devices');\n        alert(response); \n    }\n\n    \n    const fetchDevices = async () => {\n        //TODO: ADd fail catch\n        let devices = await API.getDevices(token);\n        devices = devices.map(async (device) => {\n            if (device.customerId) {\n                const customer = await fetchCustomersById(device.customerId);\n                device.customerName = customer.firstName + ' ' + customer.lastName;\n            }\n            return device;\n        })\n        const devicesData = {...data};\n        devices = await Promise.all(devices);\n        devices.forEach(devices => {\n            devices['device'] = <>\n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => handleEdit(evt)}>  <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        devicesData.rows = devices\n        setData(devicesData);\n    }\n\n    useEffect(() => {\n        if (showModal === true) fetchCustomers();\n        fetchDevices();\n    }, [showModal, data, selectedDevice]);\n\n    return(\n        <div>\n            <Navigatior devicesActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addDevices() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <DeviceModal setShowModal={setShowModal} selectedDevice={selectedDevice} customers={customers} showModal={showModal}></DeviceModal>}\n        </div>\n    )\n}\nexport default Devices","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Customers.jsx",["71"],"import Navigatior from \"./Navigatior\";\nimport CustomerModal from \"./CustomerModal\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Customers(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'First Name',\n                field: 'firstName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Last Name',\n                field: 'lastName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Email Address',\n                field: 'addressEmail',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Phone Number',\n                field: 'phoneNumber',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Gender',\n                field: 'gender',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Age',\n                field: 'age',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Martial Status',\n                field: 'martialStatus',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'customer',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: [] //TODO: read from redis cache\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState({\n        firstName: '',\n        lastName: '',\n        addressEmail: '',\n        phoneNumber: '',\n        gender: '',\n        age: '',\n        martialStatus: '',\n    });\n    const token = localStorage.getItem('token');\n\n    const addCustomers = () => {\n        setSelectedCustomer({\n            firstName: '',\n            lastName: '',\n            addressEmail: '',\n            phoneNumber: '',\n            gender: '',\n            age: '',\n            martialStatus: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n    \n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const customer = data.rows.find(row => row._id === target.id);\n        setSelectedCustomer(customer);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteCustomerById(token, target.id);\n        if (response) return history.push('/main/customers');\n        alert(response); \n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const consumers = await API.getCustomers(token);\n        const customerData = {...data};\n        consumers.forEach(consumer => {\n            consumer['customer'] = <>\n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => handleEdit(evt)}> <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        customerData.rows = consumers;\n        setData(customerData)\n    }\n\n    useEffect (() => {\n        fetchCustomers();\n    }, [showModal, data, selectedCustomer]);\n\n    return(\n        <div>\n            <Navigatior customersActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addCustomers() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <CustomerModal customer={selectedCustomer} setShowModal={setShowModal} showModal={showModal}></CustomerModal>}\n        </div>\n    )\n}\nexport default Customers","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Register.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Profile.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Login.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/index.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/main.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Navigatior.jsx",["72","73"],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/DeviceModal.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/CustomerModal.jsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":166,"column":11,"nodeType":"80","messageId":"81","endLine":166,"endColumn":34},{"ruleId":"82","severity":1,"message":"83","line":174,"column":8,"nodeType":"84","endLine":174,"endColumn":96,"suggestions":"85"},{"ruleId":"82","severity":1,"message":"86","line":110,"column":8,"nodeType":"84","endLine":110,"endColumn":41,"suggestions":"87"},{"ruleId":"82","severity":1,"message":"83","line":120,"column":8,"nodeType":"84","endLine":120,"endColumn":43,"suggestions":"88"},{"ruleId":"78","severity":1,"message":"89","line":7,"column":9,"nodeType":"80","messageId":"81","endLine":7,"endColumn":16},{"ruleId":"78","severity":1,"message":"90","line":8,"column":22,"nodeType":"80","messageId":"81","endLine":8,"endColumn":35},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'addMachineGeneratedData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'fetchCustomers' and 'fetchDevices'. Either include them or remove the dependency array.",["94"],["95"],"'history' is assigned a value but never used.","'setClassNames' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake, fetchCustomers]",{"range":"102","text":"103"},"Update the dependencies array to be: [showModal, data, selectedDevice, fetchCustomers, fetchDevices]",{"range":"104","text":"105"},"Update the dependencies array to be: [showModal, data, selectedCustomer, fetchCustomers]",{"range":"106","text":"107"},[8053,8141],"[customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake, fetchCustomers]",[3485,3518],"[showModal, data, selectedDevice, fetchCustomers, fetchDevices]",[3650,3685],"[showModal, data, selectedCustomer, fetchCustomers]"]