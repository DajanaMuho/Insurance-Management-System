[{"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/index.js":"1","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/App.js":"2","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/index.jsx":"3","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/index.jsx":"4","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx":"5","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx":"6","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Customers.jsx":"7","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Register.jsx":"8","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Profile.jsx":"9","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Login.jsx":"10","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/index.js":"11","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/main.js":"12","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Navigatior.jsx":"13","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/DeviceModal.jsx":"14","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/CustomerModal.jsx":"15"},{"size":263,"mtime":1637827210225,"results":"16","hashOfConfig":"17"},{"size":1492,"mtime":1637860871343,"results":"18","hashOfConfig":"17"},{"size":189,"mtime":1637827210225,"results":"19","hashOfConfig":"17"},{"size":89,"mtime":1637827210225,"results":"20","hashOfConfig":"17"},{"size":10830,"mtime":1637874064256,"results":"21","hashOfConfig":"17"},{"size":4119,"mtime":1637827210225,"results":"22","hashOfConfig":"17"},{"size":4270,"mtime":1637827210225,"results":"23","hashOfConfig":"17"},{"size":3909,"mtime":1637827210225,"results":"24","hashOfConfig":"17"},{"size":2983,"mtime":1637827210225,"results":"25","hashOfConfig":"17"},{"size":3222,"mtime":1637827210225,"results":"26","hashOfConfig":"17"},{"size":1507,"mtime":1637827210225,"results":"27","hashOfConfig":"17"},{"size":3214,"mtime":1637827210225,"results":"28","hashOfConfig":"17"},{"size":1894,"mtime":1637827210225,"results":"29","hashOfConfig":"17"},{"size":2705,"mtime":1637827210225,"results":"30","hashOfConfig":"17"},{"size":4006,"mtime":1637827210225,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g702tn",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/index.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/App.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/index.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/index.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Dashboard.jsx",["65","66"],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Devices.jsx",["67"],"import Navigatior from \"./Navigatior\"\nimport React, { useEffect, useState } from 'react';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport DeviceModal from \"./DeviceModal\";\nimport { useHistory } from 'react-router-dom';\nconst API = require(\"../../api/main\").default;\n\nfunction Devices(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'Car Age',\n                field: 'carAge',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'License Plate',\n                field: 'licensePlate',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Customer',\n                field: 'customerName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'device',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: []\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [customers, setCustomers] = useState([]);\n    const [selectedDevice, setSelectedDevice] = useState({\n        carAge: '',\n        licensePlate: '',\n        customerId: '',\n        customerName: ''\n    });\n    const token = localStorage.getItem('token');\n\n    const addDevices = () => {\n        setSelectedDevice({\n            carAge: '',\n            licensePlate: '',\n            customerId: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const customers = await API.getCustomers(token);\n        setCustomers(customers)\n    }\n\n    const fetchCustomersById = (id) => {\n        return API.getCustomerById(token, id);\n    }\n\n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const device = data.rows.find(row => row._id === target.id);\n        setSelectedDevice(device);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteDeviceById(token, target.id);\n        if (response) return history.push('/main/devices');\n        alert(response); \n    }\n\n    \n    const fetchDevices = async () => {\n        //TODO: ADd fail catch\n        let devices = await API.getDevices(token);\n        devices = devices.map(async (device) => {\n            if (device.customerId) {\n                const customer = await fetchCustomersById(device.customerId);\n                device.customerName = customer.firstName + ' ' + customer.lastName;\n            }\n            return device;\n        })\n        const devicesData = {...data};\n        devices = await Promise.all(devices);\n        devices.forEach(devices => {\n            devices['device'] = <>\n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => handleEdit(evt)}>  <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={devices._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        devicesData.rows = devices\n        setData(devicesData);\n    }\n\n    useEffect(() => {\n        if (showModal === true) fetchCustomers();\n        fetchDevices();\n    }, [showModal, data, selectedDevice]);\n\n    return(\n        <div>\n            <Navigatior devicesActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addDevices() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <DeviceModal setShowModal={setShowModal} selectedDevice={selectedDevice} customers={customers} showModal={showModal}></DeviceModal>}\n        </div>\n    )\n}\nexport default Devices","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Customers.jsx",["68"],"import Navigatior from \"./Navigatior\";\nimport CustomerModal from \"./CustomerModal\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { MDBDataTable, MDBBtn, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nconst API = require(\"../../api/main\").default;\n\nfunction Customers(props) {\n    const history = useHistory();\n    const [data, setData] = useState({\n        columns: [\n            {\n                label: 'First Name',\n                field: 'firstName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Last Name',\n                field: 'lastName',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Email Address',\n                field: 'addressEmail',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Phone Number',\n                field: 'phoneNumber',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Gender',\n                field: 'gender',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Age',\n                field: 'age',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Martial Status',\n                field: 'martialStatus',\n                sort: 'asc',\n                width: 150\n            },\n            {\n                label: 'Action',\n                field: 'customer',\n                sort: 'asc',\n                width: 150\n            },\n        ],\n        rows: [] //TODO: read from redis cache\n    });\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState({\n        firstName: '',\n        lastName: '',\n        addressEmail: '',\n        phoneNumber: '',\n        gender: '',\n        age: '',\n        martialStatus: '',\n    });\n    const token = localStorage.getItem('token');\n\n    const addCustomers = () => {\n        setSelectedCustomer({\n            firstName: '',\n            lastName: '',\n            addressEmail: '',\n            phoneNumber: '',\n            gender: '',\n            age: '',\n            martialStatus: '',\n        }); //Set a new one for every insert\n        return setShowModal(!showModal);\n    }\n    \n    const handleEdit = (evt) => {\n        const target = evt.currentTarget || evt.target;\n        const customer = data.rows.find(row => row._id === target.id);\n        setSelectedCustomer(customer);\n      return setShowModal(true);\n    }\n\n    const handleDelete = async (evt) => {\n        //TODO: Add popup component\n        const target = evt.currentTarget || evt.target;\n        const response = await API.deleteCustomerById(token, target.id);\n        if (response) return history.push('/main/customers');\n        alert(response); \n    }\n\n    const fetchCustomers = async () => {\n        //TODO: ADd fail catch\n        const consumers = await API.getCustomers(token);\n        const customerData = {...data};\n        consumers.forEach(consumer => {\n            consumer['customer'] = <>\n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => handleEdit(evt)}> <MDBIcon icon=\"pencil-alt\"/>  </MDBBtn>  \n                <MDBBtn size=\"sm\" id={consumer._id} onClick={(evt) => {handleDelete(evt)}}>  <MDBIcon icon=\"trash-alt\"/>  </MDBBtn>\n            </>\n        })\n        customerData.rows = consumers;\n        setData(customerData)\n    }\n\n    useEffect (() => {\n        fetchCustomers();\n    }, [showModal, data, selectedCustomer]);\n\n    return(\n        <div>\n            <Navigatior customersActive=\"active\" />\n            <div className='tableStyle'>\n                <MDBBtn onClick={() => { addCustomers() }}> <MDBIcon icon=\"plus\"/> </MDBBtn>\n                <MDBDataTable \n                    striped \n                    bordered\n                    hover\n                    data={data}\n                />\n            </div>\n            {showModal && <CustomerModal customer={selectedCustomer} setShowModal={setShowModal} showModal={showModal}></CustomerModal>}\n        </div>\n    )\n}\nexport default Customers","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Register.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Profile.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/auth/Login.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/index.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/api/main.js",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/Navigatior.jsx",["69","70"],"import React, { useState }  from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\nimport '../../index.css';\nimport { useHistory } from 'react-router-dom';\n\nfunction Navigator(props) {\n  const history = useHistory();\n  const [classNames, setClassNames] = useState({\n      dashboard: props.dashboardActive || false,\n      customers: props.customersActive || false,\n      devices: props.devicesActive || false,\n      profile: props.profileActive || false\n  })\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('selectedCustomer');\n  }\n\n  return (\n      <div>\n          <MDBNavbar className='navbarBackground' dark expand=\"md\" scrolling fixed=\"top\">\n            <MDBNavbarBrand href=\"/\">\n              <MDBNavLink to=\"/main/profile\" className={classNames.profile} ><MDBIcon className=\"icon\" icon=\"user\" /></MDBNavLink>\n            </MDBNavbarBrand>\n            <MDBCollapse navbar>\n              <MDBNavbarNav left>\n                <MDBNavItem className={classNames.dashboard}>\n                    <MDBNavLink to=\"/main/dashboard\">Dashboard</MDBNavLink>\n                </MDBNavItem>\n                <MDBNavItem className={classNames.customers}>\n                    <MDBNavLink to=\"/main/customers\">Customers</MDBNavLink>\n                </MDBNavItem>\n                <MDBNavItem className={classNames.devices}>\n                    <MDBNavLink to=\"/main/devices\">Devices</MDBNavLink>\n                </MDBNavItem>\n              </MDBNavbarNav>\n              <MDBNavbarNav right>\n                <MDBNavItem>\n                  <MDBNavLink to=\"/auth/login\" onClick={() => logout()}><MDBIcon icon=\"sign-out-alt\" /></MDBNavLink>\n                </MDBNavItem>\n              </MDBNavbarNav>\n            </MDBCollapse>\n          </MDBNavbar>\n      </div>\n    );\n}\n\nexport default Navigator","/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/DeviceModal.jsx",[],"/home/dajana/Desktop/Insurance-Managament-System/frontend/src/components/main/CustomerModal.jsx",[],{"ruleId":"71","severity":1,"message":"72","line":170,"column":11,"nodeType":"73","messageId":"74","endLine":170,"endColumn":34},{"ruleId":"75","severity":1,"message":"76","line":178,"column":8,"nodeType":"77","endLine":178,"endColumn":96,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":110,"column":8,"nodeType":"77","endLine":110,"endColumn":41,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"76","line":120,"column":8,"nodeType":"77","endLine":120,"endColumn":43,"suggestions":"81"},{"ruleId":"71","severity":1,"message":"82","line":7,"column":9,"nodeType":"73","messageId":"74","endLine":7,"endColumn":16},{"ruleId":"71","severity":1,"message":"83","line":8,"column":22,"nodeType":"73","messageId":"74","endLine":8,"endColumn":35},"no-unused-vars","'addMachineGeneratedData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCustomers'. Either include it or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has missing dependencies: 'fetchCustomers' and 'fetchDevices'. Either include them or remove the dependency array.",["85"],["86"],"'history' is assigned a value but never used.","'setClassNames' is assigned a value but never used.",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake, fetchCustomers]",{"range":"93","text":"94"},"Update the dependencies array to be: [showModal, data, selectedDevice, fetchCustomers, fetchDevices]",{"range":"95","text":"96"},"Update the dependencies array to be: [showModal, data, selectedCustomer, fetchCustomers]",{"range":"97","text":"98"},[8394,8482],"[customers, leftIntensity, timeOnTheRoadLine, rightItensity, barChartAcc, barChartBrake, fetchCustomers]",[3485,3518],"[showModal, data, selectedDevice, fetchCustomers, fetchDevices]",[3650,3685],"[showModal, data, selectedCustomer, fetchCustomers]"]